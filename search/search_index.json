{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dev Wrangler \u00b6 Bringing peace, freedom, justice, and security to your Python empire Documentation: https://birdcar.github.io/devwrangler GitHub: https://github.com/birdcar/devwrangler PyPI: https://pypi.org/project/devwrangler/ Free software: MIT Features \u00b6 Single command configuration of: your Python project's virtual environment your project's VS Code settings Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#dev-wrangler","text":"Bringing peace, freedom, justice, and security to your Python empire Documentation: https://birdcar.github.io/devwrangler GitHub: https://github.com/birdcar/devwrangler PyPI: https://pypi.org/project/devwrangler/ Free software: MIT","title":"Dev Wrangler"},{"location":"#features","text":"Single command configuration of: your Python project's virtual environment your project's VS Code settings","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for Dev Wrangler. cli \u00b6 Typer-based CLI for devwrangler. main ( req_file =< typer . models . ArgumentInfo object at 0x7f2c06576b90 > , dev =< typer . models . ArgumentInfo object at 0x7f2c06576bc0 > ) \u00b6 CLI main function. Source code in devwrangler/cli.py def main ( req_file : str = typer . Argument ( 'requirements-dev.txt' ), dev : bool = typer . Argument ( True ), ): \"\"\"CLI main function.\"\"\" app_dir = typer . get_app_dir ( APP_NAME , force_posix = True ) config_file_path : Path = Path ( app_dir ) / 'config.json' # check if config data exists, if not, proceed with default config if not config_file_path . exists (): typer . echo ( f \"Config file not found at { config_file_path } \" ) typer . echo ( \"Using our default configuration\" ) config_data = parse_config_file () else : config_data = parse_config_file ( config_file_path ) create_virtual_environment ( VENV_PATH , logger = typer . echo ) set_workspace_settings ( config_data , workspace_path = ( PROJECT_ROOT / '.vscode' )) devwrangler \u00b6 Main module. create_virtual_environment ( venv_path , logger =< built - in function print > ) \u00b6 Generate a virtual environment for the user, including special packages. Source code in devwrangler/devwrangler.py def create_virtual_environment ( venv_path : Path , logger : Callable = print ): \"\"\"Generate a virtual environment for the user, including special packages.\"\"\" pretty_path = '/' . join ( venv_path . parts [ - 2 :]) msg = f \"Generating virtual environment in { pretty_path } \" logger ( msg ) try : venv . create ( venv_path , with_pip = True , prompt = venv_path . parent . name , upgrade_deps = True , ) except TypeError : # upgrade_deps was introduced in 3.9, without it we need to make a separate # call to run_command venv . create ( venv_path , with_pip = True , prompt = venv_path . parent . name ) run_command ( [ str ( get_py_prefix ( venv_path )), \"-m\" , \"pip\" , \"install\" , \"-U\" , \"pip\" , \"setuptools\" , ] ) get_py_prefix ( venv_path ) \u00b6 Return the appropriate prefix for the virtual environment's Python. If platform.system() is 'Windows' \u00b6 get_py_prefix(Path.cwd()/'.venv') Path('.venv/Scripts/python.exe') If platform.system() is not 'Windows' \u00b6 get_py_prefix(Path.cwd()/'.venv') Path('.venv/bin/python3') Source code in devwrangler/devwrangler.py def get_py_prefix ( venv_path : Path ) -> Path : \"\"\"Return the appropriate prefix for the virtual environment's Python. >>> # If platform.system() is 'Windows' >>> get_py_prefix(Path.cwd()/'.venv') Path('.venv/Scripts/python.exe') >>> # If platform.system() is not 'Windows' >>> get_py_prefix(Path.cwd()/'.venv') Path('.venv/bin/python3') \"\"\" if platform . system () . lower () == 'windows' : return venv_path / \"Scripts\" / \"python.exe\" return venv_path / \"bin\" / \"python3\" install_requirements ( requirements_path = PosixPath ( '/home/runner/work/devwrangler/devwrangler/requirements.txt' ), venv_path = PosixPath ( '/home/runner/work/devwrangler/devwrangler/.venv' )) \u00b6 Install a requirements file, if it exists. Source code in devwrangler/devwrangler.py def install_requirements ( requirements_path : Path = Path . cwd () / 'requirements.txt' , venv_path : Path = Path . cwd () / '.venv' , ): \"\"\"Install a requirements file, if it exists.\"\"\" run_command ( [ str ( get_py_prefix ( venv_path )), \"pip\" , \"install\" , \"-r\" , str ( requirements_path )] ) parse_config_file ( config_file_path = None ) \u00b6 Parse a devwrangler JSON file. parse_config_file(Path.home() / '.devwrangler' / 'config.json') { 'vscode': {...}, 'dev_requirements': True, ... } Source code in devwrangler/devwrangler.py def parse_config_file ( config_file_path : Optional [ Path ] = None ) -> Dict [ str , Any ]: \"\"\"Parse a devwrangler JSON file. >>> parse_config_file(Path.home() / '.devwrangler' / 'config.json') { 'vscode': {...}, 'dev_requirements': True, ... } \"\"\" if config_file_path is None : return DEFAULT_VSCODE_CONFIG else : with open ( config_file_path ) as json_file : return json . load ( json_file ) run_command ( command ) \u00b6 Attempt to run a specific command in the users's shell. run_command(['ls']) Source code in devwrangler/devwrangler.py def run_command ( command : Sequence [ str ]): \"\"\"Attempt to run a specific command in the users's shell. >>> run_command(['ls']) \"\"\" print ( f \" { ' ' . join ( str ( part ) for part in command ) } \" ) try : sub . run ( command , check = True , encoding = \"utf-8\" , ) except sub . CalledProcessError : warnings . warn ( ( f \"Problem encountered when running ` { ' ' . join ( command ) } ` \\n\\n \" f \"Review the output above to manually debug the issue\" ) ) sys . exit ( 1 ) set_workspace_settings ( config_data , workspace_path ) \u00b6 Save the settings.json file for the project. Source code in devwrangler/devwrangler.py def set_workspace_settings ( config_data : Dict [ str , Any ], workspace_path : Path ): \"\"\"Save the settings.json file for the project.\"\"\" settings_path = workspace_path / 'settings.json' if not workspace_path . exists (): workspace_path . mkdir () if not settings_path . exists (): with open ( settings_path , mode = 'w' ) as vsc_settings : json . dump ( config_data , vsc_settings , sort_keys = True , indent = 2 ) else : with open ( settings_path ) as f : existing_settings = json . load ( f ) config_data |= existing_settings with open ( settings_path , 'w' ) as vsc_settings : json . dump ( config_data , vsc_settings , sort_keys = True , indent = 2 )","title":"Modules"},{"location":"api/#devwrangler.cli","text":"Typer-based CLI for devwrangler.","title":"cli"},{"location":"api/#devwrangler.cli.main","text":"CLI main function. Source code in devwrangler/cli.py def main ( req_file : str = typer . Argument ( 'requirements-dev.txt' ), dev : bool = typer . Argument ( True ), ): \"\"\"CLI main function.\"\"\" app_dir = typer . get_app_dir ( APP_NAME , force_posix = True ) config_file_path : Path = Path ( app_dir ) / 'config.json' # check if config data exists, if not, proceed with default config if not config_file_path . exists (): typer . echo ( f \"Config file not found at { config_file_path } \" ) typer . echo ( \"Using our default configuration\" ) config_data = parse_config_file () else : config_data = parse_config_file ( config_file_path ) create_virtual_environment ( VENV_PATH , logger = typer . echo ) set_workspace_settings ( config_data , workspace_path = ( PROJECT_ROOT / '.vscode' ))","title":"main()"},{"location":"api/#devwrangler.devwrangler","text":"Main module.","title":"devwrangler"},{"location":"api/#devwrangler.devwrangler.create_virtual_environment","text":"Generate a virtual environment for the user, including special packages. Source code in devwrangler/devwrangler.py def create_virtual_environment ( venv_path : Path , logger : Callable = print ): \"\"\"Generate a virtual environment for the user, including special packages.\"\"\" pretty_path = '/' . join ( venv_path . parts [ - 2 :]) msg = f \"Generating virtual environment in { pretty_path } \" logger ( msg ) try : venv . create ( venv_path , with_pip = True , prompt = venv_path . parent . name , upgrade_deps = True , ) except TypeError : # upgrade_deps was introduced in 3.9, without it we need to make a separate # call to run_command venv . create ( venv_path , with_pip = True , prompt = venv_path . parent . name ) run_command ( [ str ( get_py_prefix ( venv_path )), \"-m\" , \"pip\" , \"install\" , \"-U\" , \"pip\" , \"setuptools\" , ] )","title":"create_virtual_environment()"},{"location":"api/#devwrangler.devwrangler.get_py_prefix","text":"Return the appropriate prefix for the virtual environment's Python.","title":"get_py_prefix()"},{"location":"api/#devwrangler.devwrangler.get_py_prefix--if-platformsystem-is-windows","text":"get_py_prefix(Path.cwd()/'.venv') Path('.venv/Scripts/python.exe')","title":"If platform.system() is 'Windows'"},{"location":"api/#devwrangler.devwrangler.get_py_prefix--if-platformsystem-is-not-windows","text":"get_py_prefix(Path.cwd()/'.venv') Path('.venv/bin/python3') Source code in devwrangler/devwrangler.py def get_py_prefix ( venv_path : Path ) -> Path : \"\"\"Return the appropriate prefix for the virtual environment's Python. >>> # If platform.system() is 'Windows' >>> get_py_prefix(Path.cwd()/'.venv') Path('.venv/Scripts/python.exe') >>> # If platform.system() is not 'Windows' >>> get_py_prefix(Path.cwd()/'.venv') Path('.venv/bin/python3') \"\"\" if platform . system () . lower () == 'windows' : return venv_path / \"Scripts\" / \"python.exe\" return venv_path / \"bin\" / \"python3\"","title":"If platform.system() is not 'Windows'"},{"location":"api/#devwrangler.devwrangler.install_requirements","text":"Install a requirements file, if it exists. Source code in devwrangler/devwrangler.py def install_requirements ( requirements_path : Path = Path . cwd () / 'requirements.txt' , venv_path : Path = Path . cwd () / '.venv' , ): \"\"\"Install a requirements file, if it exists.\"\"\" run_command ( [ str ( get_py_prefix ( venv_path )), \"pip\" , \"install\" , \"-r\" , str ( requirements_path )] )","title":"install_requirements()"},{"location":"api/#devwrangler.devwrangler.parse_config_file","text":"Parse a devwrangler JSON file. parse_config_file(Path.home() / '.devwrangler' / 'config.json') { 'vscode': {...}, 'dev_requirements': True, ... } Source code in devwrangler/devwrangler.py def parse_config_file ( config_file_path : Optional [ Path ] = None ) -> Dict [ str , Any ]: \"\"\"Parse a devwrangler JSON file. >>> parse_config_file(Path.home() / '.devwrangler' / 'config.json') { 'vscode': {...}, 'dev_requirements': True, ... } \"\"\" if config_file_path is None : return DEFAULT_VSCODE_CONFIG else : with open ( config_file_path ) as json_file : return json . load ( json_file )","title":"parse_config_file()"},{"location":"api/#devwrangler.devwrangler.run_command","text":"Attempt to run a specific command in the users's shell. run_command(['ls']) Source code in devwrangler/devwrangler.py def run_command ( command : Sequence [ str ]): \"\"\"Attempt to run a specific command in the users's shell. >>> run_command(['ls']) \"\"\" print ( f \" { ' ' . join ( str ( part ) for part in command ) } \" ) try : sub . run ( command , check = True , encoding = \"utf-8\" , ) except sub . CalledProcessError : warnings . warn ( ( f \"Problem encountered when running ` { ' ' . join ( command ) } ` \\n\\n \" f \"Review the output above to manually debug the issue\" ) ) sys . exit ( 1 )","title":"run_command()"},{"location":"api/#devwrangler.devwrangler.set_workspace_settings","text":"Save the settings.json file for the project. Source code in devwrangler/devwrangler.py def set_workspace_settings ( config_data : Dict [ str , Any ], workspace_path : Path ): \"\"\"Save the settings.json file for the project.\"\"\" settings_path = workspace_path / 'settings.json' if not workspace_path . exists (): workspace_path . mkdir () if not settings_path . exists (): with open ( settings_path , mode = 'w' ) as vsc_settings : json . dump ( config_data , vsc_settings , sort_keys = True , indent = 2 ) else : with open ( settings_path ) as f : existing_settings = json . load ( f ) config_data |= existing_settings with open ( settings_path , 'w' ) as vsc_settings : json . dump ( config_data , vsc_settings , sort_keys = True , indent = 2 )","title":"set_workspace_settings()"},{"location":"changelog/","text":"Changelog \u00b6 [0.2.2] - 2021-11-3 \u00b6 Fixed \u00b6 The settings.json file that was output by pydev was malformed, and this patch ensures that's no longer the case. [0.2.1] - 2021-10-10 \u00b6 Added \u00b6 Very basic information has been added to the README file, reflecting the current features of the project. Changed \u00b6 The virtual environment prompt was being set to the Path to the parent folder, rather than the name of the parent folder itself. This has now been fixed. [0.2.0] - 2021-10-10 \u00b6 Added \u00b6 It lives! pydev will now work in a very alpha form after devwrangler is installed with pipx One whole test to verify that creating the virtual env works as expected on all supported versions of Python. Typer, to manage our CLI niceties rather than writing them from scratch Rich, to eventually make the CLI output pretty [0.1.1] - 2021-10-07 \u00b6 Added \u00b6 Added support for Python 3.10 Added dev environment niceties Enabled tighter VS Code integration Specified supported pyenv versions Removed \u00b6 Dropped support for Python 3.6 [0.1.0] - 2021-10-07 \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#022---2021-11-3","text":"","title":"[0.2.2] - 2021-11-3"},{"location":"changelog/#fixed","text":"The settings.json file that was output by pydev was malformed, and this patch ensures that's no longer the case.","title":"Fixed"},{"location":"changelog/#021---2021-10-10","text":"","title":"[0.2.1] - 2021-10-10"},{"location":"changelog/#added","text":"Very basic information has been added to the README file, reflecting the current features of the project.","title":"Added"},{"location":"changelog/#changed","text":"The virtual environment prompt was being set to the Path to the parent folder, rather than the name of the parent folder itself. This has now been fixed.","title":"Changed"},{"location":"changelog/#020---2021-10-10","text":"","title":"[0.2.0] - 2021-10-10"},{"location":"changelog/#added_1","text":"It lives! pydev will now work in a very alpha form after devwrangler is installed with pipx One whole test to verify that creating the virtual env works as expected on all supported versions of Python. Typer, to manage our CLI niceties rather than writing them from scratch Rich, to eventually make the CLI output pretty","title":"Added"},{"location":"changelog/#011---2021-10-07","text":"","title":"[0.1.1] - 2021-10-07"},{"location":"changelog/#added_2","text":"Added support for Python 3.10 Added dev environment niceties Enabled tighter VS Code integration Specified supported pyenv versions","title":"Added"},{"location":"changelog/#removed","text":"Dropped support for Python 3.6","title":"Removed"},{"location":"changelog/#010---2021-10-07","text":"First release on PyPI.","title":"[0.1.0] - 2021-10-07"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/birdcar/devwrangler/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Dev Wrangler could always use more documentation, whether as part of the official Dev Wrangler docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/birdcar/devwrangler/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up devwrangler for local development. Fork the devwrangler repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/devwrangler.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/birdcar/devwrangler/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_devwrangler.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/birdcar/devwrangler/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Dev Wrangler could always use more documentation, whether as part of the official Dev Wrangler docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/birdcar/devwrangler/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up devwrangler for local development. Fork the devwrangler repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/devwrangler.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/birdcar/devwrangler/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_devwrangler.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Dev Wrangler, run this command in your terminal: $ pipx install devwrangler This is the preferred method to install Dev Wrangler, as it will always install the most recent stable release. If you don't have pipx installed, this [Python installation guide][] can guide you through the process. From source \u00b6 The source for Dev Wrangler can be downloaded from the Github repo . You can either clone the public repository: $ git clone https://github.com/birdcar/devwrangler.git Or download the tarball : $ curl -OJL https://github.com/birdcar/devwrangler/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Dev Wrangler, run this command in your terminal: $ pipx install devwrangler This is the preferred method to install Dev Wrangler, as it will always install the most recent stable release. If you don't have pipx installed, this [Python installation guide][] can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Dev Wrangler can be downloaded from the Github repo . You can either clone the public repository: $ git clone https://github.com/birdcar/devwrangler.git Or download the tarball : $ curl -OJL https://github.com/birdcar/devwrangler/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Dev Wrangler in a project import devwrangler","title":"Usage"},{"location":"usage/#usage","text":"To use Dev Wrangler in a project import devwrangler","title":"Usage"}]}